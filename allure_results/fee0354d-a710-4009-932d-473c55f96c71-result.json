{"name": "Проверка позитивного сценария оформления заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid type: sequence, expected a string at line 1 column 28", "trace": "self = <tests.test_order_page.TestOrderPageOrder object at 0x000001B1E08D4B90>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"88167304-a54d-4e25-85dd-ffe1223aecd7\")>\nbutton = ('xpath', '//div[contains(@class, \"Home_FinishButton\")]/button')\ntest_data = ['Петр', 'Петров', 'Днепропетровская улица, 5к1', 'Южная', '+79991112222', '01.06.2025', ...]\n\n    @allure.title('Проверка позитивного сценария оформления заказа')\n    @allure.description('Тестирование функциональности оформления заказа из двух точек входа')\n    @pytest.mark.parametrize('button, test_data', [\n        (MainPageLocators.order_button_in_header, TestData.test_data_user1),\n        (MainPageLocators.order_button_in_main, TestData.test_data_user2)\n    ])\n    def test_order_all_fields_success(self, driver, button, test_data):\n        order_page = OrderPage(driver)\n    \n        # Прокрутка к кнопке\n        order_page.scroll_to_element(button)\n    \n        # Явное ожидание видимости кнопки\n>       WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, button))\n        )\n\ntests\\test_order_page.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:217: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B1E08F1B80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid type: sequence, expected a string at line 1 column 28\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid type: sequence, expected a string at line 1 column 28\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException"}, "description": "Тестирование функциональности оформления заказа из двух точек входа", "steps": [{"name": "Скролл до элемента", "status": "passed", "steps": [{"name": "Поиск элемента по локатору: ('xpath', '//div[contains(@class, \"Home_FinishButton\")]/button')", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', '//div[contains(@class, \"Home_FinishButton\")]/button')"}], "start": 1751803620035, "stop": 1751803620047}], "parameters": [{"name": "locator", "value": "('xpath', '//div[contains(@class, \"Home_FinishButton\")]/button')"}], "start": 1751803620035, "stop": 1751803620056}], "parameters": [{"name": "button", "value": "('xpath', '//div[contains(@class, \"Home_FinishButton\")]/button')"}, {"name": "test_data", "value": "['Петр', 'Петров', 'Днепропетровская улица, 5к1', 'Южная', '+79991112222', '01.06.2025', 'Помогите']"}], "start": 1751803620035, "stop": 1751803620056, "uuid": "d3713036-7865-4e47-b02e-d5b7cbefd8b2", "historyId": "7683eb45dda9183c2a0d6f146f5160f7", "testCaseId": "676123171490a73bfbb737692482e4d3", "fullName": "tests.test_order_page.TestOrderPageOrder#test_order_all_fields_success", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_page"}, {"name": "subSuite", "value": "TestOrderPageOrder"}, {"name": "host", "value": "DESKTOP-3E7DQ66"}, {"name": "thread", "value": "13232-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_page"}]}